/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * This file is licensed under  GNU GPL (General Public License) version 3.
 *
 * File ini dilisensikan kepada Anda, bukan  Anda miliki.  Pemilik file ini
 * adalah pemegang  hak cipta ("copyright holder") di atas. Gunakanlah file
 * ini sesuai dengan lisensi yang telah ditetapkan untuk file ini.
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * modifikasi atau karya tersebut kepada publik. Hal ini untuk menjaga agar
 * pengetahuan yang ada di sini menjadi lebih berkembang  di masa mendatang 
 * untuk kemajuan kita bersama.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit di pasar saham baik secara perorangan atau organisasi, asal tidak
 * jahat. Sebagai tambahan permintaan, kami menghimbau untuk TIDAK  menjual
 * kode/file  ini secara  apa adanya  atau dalam bundel  produk yang dijual
 * secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 *
 * Author: Benny Prijono <benny@stosia.com>
 * Contributors:
 *  - 
 */

_t0 = GetPerformanceCounter();

#include_once <..\Quant.id\AFL\Bandarmologi\BrokerDetail\BrokerDetailCommon.afl>

// Init broker detail pane as master
stInitBrokerDetail(True);

//
// Title
//
stSetBackgroundTitle(Name());
stSetBackgroundSubtitle("Broker Detail: " + WriteIf(stBdInvertBroker, "Inverted ", "") + stBrokerName);
if (stBrokerName == "") {
	stSetBackgroundSubsubtitle("Please set broker from parameters");
} else {
	stSetBackgroundSubsubtitle(QID_VERSION_LINE);
}

//
// Price section
//
_SECTION_BEGIN("Price");
	HighestHigh = HighestVisibleValue(High) * 1.02;
	LowestLow = LowestVisibleValue(Low) * 0.98;

	SetChartOptions(0,chartShowArrows|chartShowDates);
	
	_N(Title = StrFormat(QID_VERSION_LINE + " -- {{NAME}} - {{INTERVAL}} {{DATE}} {{VALUES}}"));

	SetBarFillColor(IIf(C >= Open, GetChartBkColor(), ColorBlend(GetChartBkColor(), colorBrown, 0.6)));
	
	Plot( C, 
		  "Close",  
		  IIf(C >= Open, ColorBlend(GetChartBkColor(), colorGreen, 0.6), ColorBlend(GetChartBkColor(), colorBrown, 0.6)), 
		  GetPriceStyle() | styleOwnScale, 
		  LowestLow, 
		  HighestHigh, 
		  0, 
		  1); 
_SECTION_END();


//
// Broker details
//
_SECTION_BEGIN("Broker Detail");
	brokerColor = colorBlue;

	// Broker Balance
	if (stBdParamUseValue) {
		balance = stBdGetBrokerCumValue(stBrokerName, stBrokerStartDate);
		_N(bTitle = "Holding (B Rp)");
	} else {
		balance = stBdGetBrokerCumShares(stBrokerName, stBrokerStartDate) / 100;
		_N(bTitle = "Holding (Lot)");
	}

	// Invert?
	if (stBdInvertBroker) {
		balance = stInvert(balance);
	}
	
	Plot(stAutoPrec(balance), 
		 WriteIf(stBdInvertBroker, "Inverted ", "") + bTitle, 
		 colorLightBlue, 
		 styleLine | styleThick, 
		 Null, Null, 0, 5);

	// Average price and broker's P/L
	avgPrice = stBdGetBrokerAveragePrice(stBrokerName, stBrokerStartDate);

	Plot( Prec(avgPrice, 1), 
		  "Avg Price", 
		  colorGreen, 
		  styleDashed | styleOwnScale | styleThick, 
		  LowestLow, 
		  HighestHigh, 
		  0, 
		  1); 

_SECTION_END();


_t1 = GetPerformanceCounter();
_TRACE( Name() + " Broker details " + stBrokerName + ": " + (_t1 - _t0) + " ms");
