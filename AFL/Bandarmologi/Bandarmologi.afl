/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * This file is licensed under  GNU GPL (General Public License) version 3.
 *
 * File ini dilisensikan kepada Anda, bukan  Anda miliki.  Pemilik file ini
 * adalah pemegang  hak cipta ("copyright holder") di atas. Gunakanlah file
 * ini sesuai dengan lisensi yang telah ditetapkan untuk file ini.
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * modifikasi atau karya tersebut kepada publik. Hal ini untuk menjaga agar
 * pengetahuan yang ada di sini menjadi lebih berkembang  di masa mendatang 
 * untuk kemajuan kita bersama.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit di pasar saham baik secara perorangan atau organisasi, asal tidak
 * jahat. Sebagai tambahan permintaan, kami menghimbau untuk TIDAK  menjual
 * kode/file  ini secara  apa adanya  atau dalam bundel  produk yang dijual
 * secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 *
 * Author: Benny Prijono <benny@stosia.com>
 * Contributors:
 *  - 
 */

#include_once <..\Quant.id\AFL\Tools.afl>

//
// Get broker's cummulative ownership value in Milyar Rp
//
function stBdGetBrokerCumValue(broker_name)
{
	global stBdStartBalanceDate;
	
	_N(start_date_str = stBdStartBalanceDate);
	if (Interval() < inDaily) {
		_N(start_date_str = stBdGetStartDate(0));
	} else {
		if (Interval() > inDaily) {
			stAlert("Error: Interval greater than daily is not supported yet!");
		}
	}
	
	_N( sql = " SELECT @running_total := @running_total + int_net_value AS balance, \n" + 
			  "        dtime \n" + 
			  " FROM  v_adj_intraday_broker2 \n" +
			  "	JOIN (SELECT @running_total := 0) r \n" + 
		      " WHERE nationality = 'A' AND board = 'R' AND ticker = '" + Name() + "' AND broker = '" + broker_name + "' AND \n" +
		      "       dtime >= '" + start_date_str + " 00:00:00' \n" +
		      " ORDER BY dtime Asc" );
	
	varName = "bdcum-" + broker_name;
	result = stCachedSQL(varName, sql) / MILYAR;
	
	return result;
}

//
// Get broker average price based on buy volume, buy avg, and sell volume.
// This also calculates broker's profit/loss and save it to global variable stBrokerProfit
//
function stBdGetBrokerAveragePrice(broker_name)
{
	global stBrokerProfit;
	
	isIntraday = Interval() < inDaily;
	if (isIntraday) {
		_N(col = "int");
	} else {
		if (Interval() > inDaily) {
			stAlert("Error: Interval greater than daily is not supported yet!");
		}
		_N(col = "day");
	}

	_N( sql = " SELECT " + col + "_buy_vol, dtime \n" + 
			  " FROM  v_adj_intraday_broker \n" +
		      " WHERE nationality = 'A' AND board = 'R' AND ticker = '" + Name() + "' AND broker = '" + broker_name + "' \n" +
		      " ORDER BY dtime Asc" );
	varName = "bdbuyvol-" + broker_name; 
	buyShares = stCachedSQL(varName, sql);
	
	_N( sql = " SELECT " + col + "_buy_value, dtime \n" + 
			  " FROM  v_adj_intraday_broker \n" +
		      " WHERE nationality = 'A' AND board = 'R' AND ticker = '" + Name() + "' AND broker = '" + broker_name + "' \n" +
		      " ORDER BY dtime Asc" );
	varName = "bdbuyvalue-" + broker_name; 
	buyValue = stCachedSQL(varName, sql);
	
	_N( sql = " SELECT " + col + "_sell_vol, dtime \n" + 
			  " FROM  v_adj_intraday_broker \n" +
		      " WHERE nationality = 'A' AND board = 'R' AND ticker = '" + Name() + "' AND broker = '" + broker_name + "' \n" +
		      " ORDER BY dtime Asc" );
	varName = "bdsellvol-" + broker_name; 
	sellShares = stCachedSQL(varName, sql);

	_N( sql = " SELECT " + col + "_sell_value, dtime \n" + 
			  " FROM  v_adj_intraday_broker \n" +
		      " WHERE nationality = 'A' AND board = 'R' AND ticker = '" + Name() + "' AND broker = '" + broker_name + "' \n" +
		      " ORDER BY dtime Asc" );
	varName = "bdsellvalue-" + broker_name; 
	sellValue = stCachedSQL(varName, sql);

	avgPrice = stGetAvgPrice(buyValue, buyShares, sellValue, sellShares);
	stBrokerProfit = stProfit;
	
	return avgPrice;

}
