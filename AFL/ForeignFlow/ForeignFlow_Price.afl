/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * This file is licensed under  GNU GPL (General Public License) version 3.
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * sumber ("source code")  modifikasi  atau karya  tersebut  kepada publik.
 * Hal ini untuk menjaga keterbukaan pengetahuan di masa mendatang.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit,  asal tidak jahat.  Sebagai tambahan permintaan, kami menghimbau
 * untuk  TIDAK  menjual kode/file ini secara apa adanya  atau dalam bundel
 * produk yang dijual secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 *
 * Author: Benny Prijono <benny@stosia.com>
 */
 
#include_once <..\..\quant.id\AFL\Tools.afl>
#include_once <..\..\quant.id\AFL\Common.afl>
#include_once <..\..\quant.id\AFL\ForeignFlow\ForeignFlow.afl>


stSetBackgroundTitle(Name());
stSetBackgroundSubtitle("Foreign Flow System");
stSetBackgroundSubsubtitle("Quant.id ©2017 Stosia");

_N(chartId = "ForeignFlow01");

//
// Price candlesticks
//
_SECTION_BEGIN("Price");
	SetChartOptions(0,chartShowArrows|chartShowDates);
	_N(Title = StrFormat("Quant.id ©2017 Stosia -- {{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " + WriteVal( V, 1.0 ) +" {{VALUES}}", 
						  O, H, L, C, SelectedValue( ROC( C, 1 )) ));
	Plot( C, "Close", colorDefault, styleNoTitle | GetPriceStyle() ); 
_SECTION_END();


//
// Total transaction value
//
_SECTION_BEGIN("Val(B)");
	intervalValue = stGetIntervalValue();
	StaticVarSet("intervalValue", intervalValue);
	
	maxIntervalValue = Max(HighestVisibleValue(intervalValue) * 2, 1);
	
	Plot( intervalValue, 
		  _DEFAULT_NAME(), 
		  ColorBlend( colorBlueGrey, GetChartBkColor(), 0.5  ),
		  styleHistogram | styleThick | styleOwnScale,
		  0,
		  maxIntervalValue,
		  0,
		  0,
		  5 );
	
_SECTION_END();


//
// Foreign transaction value, drawn over the transaction value above
//
_SECTION_BEGIN("Fg Val(B)");
	ffIntervalBuyValue = stGetFFIntervalBuyValue();
	ffIntervalSellValue = stGetFFIntervalSellValue();
	
	StaticVarSet("ffIntervalBuyValue", ffIntervalBuyValue);
	StaticVarSet("ffIntervalSellValue", ffIntervalSellValue);
	ffIntervalValue = ffIntervalBuyValue - ffIntervalSellValue;
	
	Plot( abs(ffIntervalValue), 
		  WriteIf(ffIntervalValue >= 0, "Net Buy (B)", "Net Sell (B)"), 
		  IIf( ffIntervalValue >= 0, colorBlue, colorOrange),
		  styleHistogram | styleThick | styleOwnScale | styleNoLabel,
		  Null,
		  maxIntervalValue,
		  0,
		  1,
		  3);
_SECTION_END();


//
// Foreign accummulation (balance)
//
_SECTION_BEGIN("Fg Cum(B)");
	ffBalance = stGetFFBalanceFromInterval(ffIntervalValue);
	
	ffBalanceMin = LowestVisibleValue(ffBalance);
	ffBalanceMax = HighestVisibleValue(ffBalance);
	
	Plot( ffBalance, 
		  "Balance(B)", 
		  colorRed, 
		  styleLine | styleOwnScale | styleThick, 
		  ffBalanceMin, 
		  ffBalanceMax, 
		  Null, 
		  2); 
_SECTION_END();

//
// Foreign average price
//
_SECTION_BEGIN("Fg Avg");
	//ffAvg = stGetFFAverageFromIntervalNet(ffIntervalValue);
	typ = stTypicalPrice();
	buyValue = ffIntervalBuyValue * MILYAR;
	sellValue = ffIntervalSellValue * MILYAR;
	
	ffAvg = stGetAvgPrice(buyValue, buyValue/typ, sellValue, sellValue / typ);
	ffProfit = stProfit;
	
	Plot( ffAvg, "Foreign Avg", colorGreen, styleDashed | styleThick | styleNoLabel); 
_SECTION_END();

//
// Foreign MA
//
_SECTION_BEGIN("Foreign MA");
	ffMaEnabled = ParamToggle("Enable Foreign MA", "No|Yes", 1);
	ffMAPeriod1 = Param("Foreign MA Period 1", 5, 1, 100);
	ffMAPeriod2 = Param("Foreign MA Period 2", 20, 1, 100);
	
	ffMA1 = MA(ffBalance, ffMAPeriod1);
	ffMA2 = MA(ffBalance, ffMAPeriod2);
	
	if (ffMaEnabled) {
		Plot( ffMA1, "Fg MA" + ffMAPeriod1, colorOrange, styleLine | styleOwnScale | styleNoLabel, ffBalanceMin, ffBalanceMax, Null, 2);
		Plot( ffMA2, "Fg MA" + ffMAPeriod2, colorOrange, styleDashed | styleOwnScale | styleNoLabel, ffBalanceMin, ffBalanceMax, Null, 2);
	}
_SECTION_END();

if (ffMaEnabled) {
	Buy = Cross( ffMA1, ffMA2) && (ffBalance >= ffMA1) && (C < ffAvg) && (ffIntervalValue > 1);
	//Plot(Buy, "Buy", colorBlack, styleNoLine | styleNoLabel | styleOwnScale);
	PlotShapes( Buy * shapeUpArrow, colorGreen, 0, Min(L, O)); 
}

stMasterChartSignalReady(chartId);
