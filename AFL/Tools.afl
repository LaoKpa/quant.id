/* 
 * Copyright (C)2017 PT. Stosia Teknologi Investasi
 *
 * File ini  berlisensi  GNU GPL (General Public License)  versi 3. Artinya
 * kalau Anda  memodifikasi file ini, atau membuat karya lain yang berbasis
 * file ini  ("derivative work"),  maka Anda  wajib  mendistribusikan  kode
 * sumber ("source code")  modifikasi  atau karya  tersebut  kepada publik.
 * Hal ini untuk menjaga keterbukaan pengetahuan di masa mendatang.
 *
 * Silakan memakai kode ini untuk kepentingan apapun termasuk untuk mencari
 * profit,  asal tidak jahat.  Sebagai tambahan permintaan, kami menghimbau
 * untuk  TIDAK  menjual kode/file ini secara apa adanya  atau dalam bundel
 * produk yang dijual secara komersial, karena hal itu tidak etis.
 *
 * Untuk penjelasan lebih lanjut silakan bertanya kepada kami.  Untuk detil
 * lisensi GPLv3  silakan lihat file GPLv3-LICENSE.md  yang didistribusikan
 * bersama file ini.
 */
MILYAR = 1000000000.0;

Open = IIf(BarIndex() > 0, Ref(Close, -1), Close);

function stConnectDatabase()
{
	odbcOpenDatabase( "ODBC;DSN=bandarmologi");
}

function stSetBackgroundTitle( txt )
{
	titleFontSize = 3;
	
	GfxSetOverlayMode(1);
	GfxSelectFont("Tahoma", Status("pxheight")/titleFontSize );
	GfxSetTextAlign( 6 );// center alignment
	GfxSetTextColor( ColorRGB( 220, 220, 220 ) );
	GfxSetBkMode(1); // transparent
	GfxTextOut( txt, Status("pxwidth")/2, Status("pxheight")/50 );
}

function stSetBackgroundSubtitle( txt )
{
	height = Status("pxheight");
	titleFontHeight = height/3;
	subtitleFontHeight = height/10;
	spacing = height/100;
	
	GfxSetOverlayMode(1);
	GfxSelectFont("Tahoma",  subtitleFontHeight);
	GfxSetTextAlign( 6 );// center alignment
	GfxSetTextColor( ColorRGB( 220, 220, 220 ) );
	GfxSetBkMode(1); // transparent
	GfxTextOut( txt, Status("pxwidth")/2,  
				height/50 + titleFontHeight + subtitleFontHeight + spacing);
}

function stSetBackgroundSubSubtitle( txt )
{
	height = Status("pxheight");
	titleFontHeight = height/3;
	subtitleFontHeight = height/10;
	subsubtitleFontHeight = height/15;
	spacing = height/100;
	
	GfxSetOverlayMode(1);
	GfxSelectFont("Tahoma", subsubtitleFontHeight );
	GfxSetTextAlign( 6 );// center alignment
	GfxSetTextColor( ColorRGB( 220, 220, 220 ) );
	GfxSetBkMode(1); // transparent
	GfxTextOut( txt, Status("pxwidth")/2,  
				height/50 + titleFontHeight + 2*subtitleFontHeight + 
					2*spacing + subsubtitleFontHeight);
}

function IndicatorRecommend( txt, goodness )
{
	if (goodness >= 2) {
		color = colorWhite;
		bkColor = colorBrightGreen;
	} else if (goodness >= 1) {
		color = colorWhite;
		bkColor = colorGreen;
	} else if (goodness == 0) {
		color = colorWhite;
		bkColor = colorLightGrey;
	} else if (goodness == -1) {
		color = colorWhite;
		bkColor = colorLightOrange;
	} else {
		color = colorWhite;
		bkColor = colorRed;
	}
	
	GfxSetOverlayMode(1);
	GfxSelectFont("Lucida Console", 10, 800 );
	GfxSetTextAlign( 2  );
	GfxSetTextColor( color );
	GfxSetBkColor( bkColor );
	GfxSetBkMode( 2 );
	GfxTextOut( txt, Status("pxwidth")-62, 0 );
}

function DisplayWatchlists()
{
	_N(txt = "");
	_N(txt += WriteIf(InWatchListName("Universe"), "U", "_"));
	_N(txt += WriteIf(InWatchListName("Foreign Flow Action"), "A", "_"));
	_N(txt += WriteIf(InWatchListName("Foreign Flow Starting"), "S", "_"));
	_N(txt += WriteIf(InWatchListName("Portfolio Hani") || InWatchListName("Portfolio Benny"), "P", "_"));
	
	GfxSetOverlayMode(1);
	GfxSelectFont("Lucida Console", 10, 800 );
	GfxSetTextAlign( 2  );
	GfxSetTextColor( colorWhite );
	GfxSetBkColor( ColorRGB( 200, 200, 200 ) );
	GfxSetBkMode( 2 );
	//GfxTextOut( txt, Status("pxwidth")-65, Status("pxheight")-30 );
	GfxTextOut( txt, Status("pxwidth")-110, 0 );
}

function GetCurrentDate()
{
	_N(Year_str = NumToStr(Now(8), 4.0, False));
	_N(Mon_str = NumToStr(Now(7), 1.0, False));
	if (StrLen(Mon_str) < 2)
		_N(Mon_str = "0" + Mon_str);
	_N(Day_str = NumToStr(Now(6), 1.0, False));
	if (StrLen(Day_str) < 2)
		_N(Day_str = "0" + Day_str);
	
	return Year_str + "-" + Mon_str + "-" + Day_str;
}

//
// For intraday, the MA should not use value from previous day
//
function stIntradayMA(arr, range)
{
	prev_dn = -1;
	dn = DateNum();
	
	for (i=0; i<BarCount; ++i) {
		if (dn[i] != prev_dn) {
			total = arr[i];
			count = 1;
		} else {
			if (count < range) {
				count += 1;
				total += arr[i];
			} else {
				total = total - arr[i - range] + arr[i];
			}
		}
		
		result[i] = total * 1.0 / count;
	}

	return result;
}

//
// Calculate simple MA for the array with provision for intraday.
//
function stMA(arr, range)
{
	if (Interval() >= inDaily) {
		result = MA(arr, range);
	} else {
		result = stIntradayMA(arr, range);
	}
	return result;
}

//
// Return the typical price (i.e. (H + L + C) / 3)
//
function stTypicalPrice()
{
	return (H + L + C) / 3;
}

//
// General purpose function to calculate the SUM of an array 
// over certain days. For example if "days" is 2, then calculate
// daily sum for the past two days.
//
function stSumDays(array, days)
{
	//dn = DateNum();
	dn = DaysSince1900();
	
	for (i=0; i<BarCount; ++i) {
		result[i] = array[i];
		bars[i] = 1;

		days_found = 1;
		last_day = dn[i];
		
		for (j=i-1; j >= 0; j--) {
			if (dn[j] != last_day) {
				days_found++;
				last_day = dn[j];
			}
			
			if (days_found > days)
				break;
				
			result[i] += array[j];
			bars[i] += 1;
		}
	}
	
	return result;
}

function LastDayValue(array)
{
	dn = DateNum();
	
	cur_dn = -1;
	ladst_day_value = -1;
	
	for (i = BarCount-1; i >= 0; i--) {
		if (dn[i] != cur_dn) {
			cur_dn = dn[i];
			ladst_day_value = array[i];
		}
		result[i] = ladst_day_value;
	}
	
	return result;
}

