/* 
 * Copyright (C) 2017 Benny Prijono <benny@stosia.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
 */
 
SetBarsRequired(sbrAll);

#include_once <..\..\quant.id\AFL\Tools.afl>
#include_once <..\..\quant.id\AFL\Common.afl>
#include_once <..\..\quant.id\AFL\ForeignFlow.afl>


SetBackgroundText(Name());


//
// Price candlesticks
//
_SECTION_BEGIN("Price");
	SetChartOptions(0,chartShowArrows|chartShowDates);
	_N(Title = StrFormat("{{NAME}} - {{INTERVAL}} {{DATE}} Open %g, Hi %g, Lo %g, Close %g (%.1f%%) Vol " + WriteVal( V, 1.0 ) +" {{VALUES}}", 
						  O, H, L, C, SelectedValue( ROC( C, 1 )) ));
	Plot( C, "Close", colorDefault, styleNoTitle | GetPriceStyle() ); 
_SECTION_END();


//
// Total transaction value
//
_SECTION_BEGIN("Value (B)");
	intervalValue = getIntervalValue();
	
	maxIntervalValue = Max(HighestVisibleValue(intervalValue) * 2, 1);
	
	Plot( intervalValue, 
		  _DEFAULT_NAME(), 
		  ColorBlend( colorBlueGrey, GetChartBkColor(), 0.5  ),
		  styleHistogram | styleThick | styleOwnScale,
		  0,
		  maxIntervalValue,
		  0,
		  0,
		  5 );
	
_SECTION_END();


//
// Foreign transaction value, drawn over the transaction value above
//
_SECTION_BEGIN("Foreign Value (B)");
	ffIntervalValue = ffGetIntervalValue();
	
	Plot( abs(ffIntervalValue), 
		  WriteIf(ffIntervalValue >= 0, "Net Buy (B)", "Net Sell (B)"), 
		  IIf( ffIntervalValue >= 0, colorBlue, colorOrange),
		  styleHistogram | styleThick | styleOwnScale | styleNoLabel,
		  Null,
		  maxIntervalValue,
		  0,
		  1,
		  3);
_SECTION_END();


/*
_SECTION_BEGIN("Daily Avg");
	AvgPeriodDays = Param("Avg Period Days", 2, 1, 600);
	
	FF_IntBuyValue = odbcGetArraySQL(" SELECT INT_BUY_VALUE, dtime " + 
								     " FROM v_adj_intraday_foreign " +
							         " WHERE ticker='" + Name() + "' ORDER BY dtime ASC") / MILYAR;
	FF_IntBuyShares = FF_IntBuyValue / Close;

	FF_DayBuyValue = SumDays(FF_IntBuyValue, AvgPeriodDays);
	FF_CumBuyShares = SumDays(FF_IntBuyShares, AvgPeriodDays);
	
	FF_BuyAvg = IIf(FF_CumBuyShares, FF_DayBuyValue / FF_CumBuyShares, Null);
	
	Plot( FF_BuyAvg, "BuyAvg(" + NumToStr(AvgPeriodDays,1.0) + ")", colorSeaGreen, styleDashed | styleThick | styleDots, Null, Null, Null, 2); 

	
	FF_IntSellValue = odbcGetArraySQL(" SELECT INT_SELL_VALUE, dtime " + 
								      " FROM v_adj_intraday_foreign " +
							          " WHERE ticker='" + Name() + "' ORDER BY dtime ASC") / MILYAR;
	FF_IntSellShares = FF_IntSellValue / Close;

	FF_DaySellValue = SumDays(FF_IntSellValue, AvgPeriodDays);
	FF_CumSellShares = SumDays(FF_IntSellShares, AvgPeriodDays);
	FF_SellAvg = IIf(FF_CumSellShares, FF_DaySellValue / FF_CumSellShares, Null);
	Plot( FF_SellAvg, 
		  "SellAvg(" + NumToStr(AvgPeriodDays,1.0) + ")", 
		  colorLightOrange, 
		  styleDashed | styleThick, 
		  Null, Null, Null, 2); 
	
_SECTION_NAME();
*/

//
// Foreign accummulation (balance)
//
_SECTION_BEGIN("Foreign Balance (B)");
	ffBalance = ffGetBalanceFromInterval(ffIntervalValue);
	
	ffBalanceMin = LowestVisibleValue(ffBalance);
	ffBalanceMax = HighestVisibleValue(ffBalance);
	
	Plot( ffBalance, 
		  "Balance(B)", 
		  colorRed, 
		  styleLine | styleOwnScale | styleThick, 
		  ffBalanceMin, 
		  ffBalanceMax, 
		  Null, 
		  2); 
_SECTION_END();

//
// Foreign average price
//
_SECTION_BEGIN("Foreign Average");
	ffAvg = ffGetAverageFromInterval(ffIntervalValue);
	Plot( ffAvg, "Foreign Avg", colorGreen, styleDashed | styleThick | styleNoLabel); 
_SECTION_END();

//
// Foreign MA
//
_SECTION_BEGIN("Foreign MA");
	ffMaEnabled = ParamToggle("Enable Foreign MA", "No|Yes", 1);
	fMA1 = Param("Foreign MA Period 1", 5, 1, 100);
	fMA2 = Param("Foreign MA Period 2", 20, 1, 100);
	
	if (ffMaEnabled) {
		Plot( MA(ffBalance, fMA1), "fMA" + fMA1, colorOrange, styleLine | styleOwnScale | styleNoLabel, ffBalanceMin, ffBalanceMax, Null, 2);
		Plot( MA(ffBalance, fMA2), "fMA" + fMA2, colorOrange, styleDashed | styleOwnScale | styleNoLabel, ffBalanceMin, ffBalanceMax, Null, 2);
	}
_SECTION_END();
